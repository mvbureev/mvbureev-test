stages:
  # - env
  - deps
  - lint
  - test
  - build
  # - e2e
  - package
  - deploy
  - clean_up

variables:
  APK_CACHE_DIR: $CI_PROJECT_DIR/cache/apk
  NPMRC_PATH: $CI_PROJECT_DIR/./.npmrc
  SENTRY_CLI_RC_PATH: $CI_PROJECT_DIR/.sentryclirc
  npm_config_cache: $CI_PROJECT_DIR/.npm
  # CYPRESS_CACHE_FOLDER: $CI_PROJECT_DIR/cache/Cypress
  # ENV_STAGE: $ENV_DEFAULT
  ENV_STAGE: "$ENV_DEFAULT"

cache:
  key: $CI_COMMIT_REF_NAME
  paths:
    - $APK_CACHE_DIR
    - $npm_config_cache
    - node_modules
    # - cache/Cypress

.rules_staging: &rules_staging
  - if: $CI_COMMIT_REF_NAME == "staging"
    when: on_success

.rules_production: &rules_production
  - if: $CI_COMMIT_REF_NAME == "main"
    when: on_success

.env_script: &env_script
  - cp $NPMRC_FILE $NPMRC_PATH | true
  - cp $SENTRYRC_FILE $SENTRY_CLI_RC_PATH | true
  - source $ENV_DEFAULT | true
  - source $ENV_STAGE | true
  - ls -lsa
  - cat ./package.json

# ------ deps stage ------
.deps_script: &deps_script
  - node -v
  - npm -v
  - yarn config set cache-folder $npm_config_cache
  - yarn install --frozen-lockfile --emoji=false --silent --production=false

.deps_common:
  image: node:16.13.1-alpine
  before_script:
    - *env_script
    - *deps_script

deps:
  extends: .deps_common
  stage: deps
  script:
    - echo "deps"
  rules:
    - if: $CI_COMMIT_REF_NAME != "staging" && $CI_COMMIT_REF_NAME != "main"
      when: on_success

deps_staging:
  extends: .deps_common
  stage: deps
  before_script: &deps_staging_before_script
    - export ENV_STAGE=$ENV_STAGING
    - *env_script
    - *deps_script
  script:
    - echo "deps_staging"
  rules: *rules_staging

deps_production:
  extends: .deps_common
  stage: deps
  before_script: &deps_production_before_script
    - export ENV_STAGE=$ENV_PRODUCTION
    - *env_script
    - *deps_script
  script:
    - echo "deps_production"
  rules: *rules_production

# ------ lint stage ------
lint:
  extends: .deps_common
  stage: lint
  needs: [deps]
  script:
    - yarn lint
  rules:
    - if: $CI_COMMIT_REF_NAME != "staging" && $CI_COMMIT_REF_NAME != "main"
      when: on_success

test:
  extends: .deps_common
  stage: test
  needs:
    - job: deps
      optional: true
    - job: deps_staging
      optional: true
    - job: deps_production
      optional: true
  script:
    - yarn jest:ci
  rules:
    - when: on_success

# ------ build stage ------
.build_common:
  extends: .deps_common
  stage: build
  needs:
    - job: deps
      optional: true
    - job: deps_staging
      optional: true
    - job: deps_production
      optional: true
    # - job: lint
    - job: test
  script:
    - SENTRY_DISABLE=true yarn build
  artifacts:
    paths:
      - .next
      - build
    expire_in: 1 day

build_staging:
  extends: .build_common
  before_script: *deps_staging_before_script
  rules: *rules_staging

build_production:
  extends: .build_common
  before_script: *deps_production_before_script
  rules: *rules_production

# ------ e2e stage ------
# e2e:
#   extends: .deps_common
#   stage: e2e
#   image: cypress/browsers:node16.13.0-chrome95-ff94
#   needs:
#     - job: build
#       artifacts: true
#     - job: deps
#   # parallel: 3
#   script:
#     - npx cypress cache path
#     - npx cypress cache list
#     - yarn cy:verify
#     - yarn cy:info
#     - yarn e2e:run -- --parallel --group "electrons on GitLab CI"
#   artifacts:
#     when: always
#     paths:
#       - cypress/videos/**/*.mp4
#       - cypress/screenshots/**/*.png
#     expire_in: 1 day

# ------ package stage ------
.package_common:
  stage: package
  image: docker
  script:
    - *env_script
    - mkdir -p $APK_CACHE_DIR
    - apk add --cache-dir $APK_CACHE_DIR docker-compose
    - docker info
    - docker-compose version
    - docker-compose config
    - echo ${HUB_PASSWORD} | docker login -u ${HUB_USER} http://nexus.mvbureev.tech:10010 --password-stdin
    - echo ${HUB_PASSWORD} | docker login -u ${HUB_USER} http://nexus.mvbureev.tech:10011 --password-stdin
    - docker-compose pull
    - docker-compose build
    - docker-compose push
    - export CUSTOM_VERSION_FOR_IMAGE=$CI_COMMIT_REF_NAME
    - docker-compose build
    - docker-compose push
    - export CUSTOM_VERSION_FOR_IMAGE=$CI_COMMIT_SHORT_SHA
    - docker-compose build
    - docker-compose push

package_staging:
  extends: .package_common
  needs:
    - job: build_staging
      artifacts: true
    # - job: e2e
  before_script:
    - export ENV_STAGE=$ENV_STAGING
    - *env_script
  rules: *rules_staging

package_production:
  extends: .package_common
  needs:
    - job: build_production
      artifacts: true
    # - job: e2e
  before_script:
    - export ENV_STAGE=$ENV_PRODUCTION
    - *env_script
  rules: *rules_production

# ------ deploy stage ------
.deploy_common:
  stage: deploy
  image: docker
  before_script:
  script:
    - *env_script
    - mkdir -p $APK_CACHE_DIR
    - apk add --cache-dir $APK_CACHE_DIR docker-compose
    - docker-compose ps
    - export CUSTOM_VERSION_FOR_IMAGE=$CI_COMMIT_SHORT_SHA
    - docker-compose up -d

deploy_staging:
  extends: .deploy_common
  needs: [package_staging]
  before_script:
    - export ENV_STAGE=$ENV_STAGING
    - *env_script
  rules: *rules_staging

deploy_production:
  extends: .deploy_common
  needs: [package_production]
  before_script:
    - export ENV_STAGE=$ENV_PRODUCTION
    - *env_script
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: manual

clean_up:
  image: node:16.13.1-alpine
  stage: clean_up
  script:
    - rm -rf node_modules
  when: on_failure
